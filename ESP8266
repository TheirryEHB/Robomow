/*
    This sketch demonstrates how to set up a simple HTTP-like server.
    The server will set a GPIO pin depending on the request
      http://server_ip/gpio/0 will set the GPIO2 low,
      http://server_ip/gpio/1 will set the GPIO2 high
    server_ip is the IP address of the ESP8266 module, will be
    printed to Serial when the module is connected.
*/

#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>

#ifndef STASSID
#define STASSID "telenet-1639522"
#define STAPSK "pp5ypZdeCxdw"
#endif

const char* ssid = STASSID;
const char* password = STAPSK;
String myString = "";
String serval = "";

//Your Domain name with URL path or IP address with path
const char* serverName = "http://192.168.0.165:1880/update-sensor";


// Create an instance of the server
// specify the port to listen on as an argument
WiFiServer server(80);


void setup() {
  Serial.begin(115200);

  // prepare LED
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, 0);

  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print(F("Connecting to "));
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(F("."));
  }
  Serial.println();
  Serial.println(F("WiFi connected"));

  // Start the server
  server.begin();
  Serial.println(F("Server started"));

  // Print the IP address
  Serial.println(WiFi.localIP());

  // WiFiClient client;
  // HTTPClient http;
  // server.begin(client, serverName);
  // // Specify content-type header
  // http.addHeader("Content-Type", "application/x-www-form-urlencoded");
  // // Data to send with HTTP POST
  // String httpRequestData = "thisistis";           
  // // Send HTTP POST request
  // int httpResponseCode = http.POST(httpRequestData);
  // Serial.print("HTTP Response code: ");
  // Serial.println(httpResponseCode);
    
  // // Free resources
  // http.end();
}

void loop() {

  // Check if a client has connected
  WiFiClient client = server.available();

  if(Serial.available() > 0){ // Data van Arduino lezen via usb connectie
    serval = Serial.readString();
    Serial.println(serval);
    
    client.write(serval.c_str());
    // client.print(F("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\n ")); //80 char
    // client.print(serval.c_str());
    // client.print("</html>");
    // client.flush();
    // client.stop();
    
   
  }

  // waitUntilNewReq();
  // diitalWrite(serval)
  
  if (!client) {
    return;
  }  

  // client.setTimeout(5000); // default is 1000
   
  // Read the first line of the request
  String req = client.readStringUntil('\r');
  // Serial.println(req);

  // Match the request
  // int val;
  // if(req != ""){
  //   if(req == "2"){
  //       myString = req+'\n';
  //       Serial.write(myString.c_str());
        
  //     }
  //     if(req == "6"){
  //       myString = req+'\n';
  //       Serial.write(myString.c_str());
  //     }
  //     if(req.indexOf(F("turn left: ")) != -1){
  //       Serial.println("rerrr: " + req);
  //       myString = req+'\n';
  //       // Serial.write(myString.c_str());
  //       serval = "ddd";
  //       delay(500);
  //       client.print(F("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\nGPIO in row "));
  //       client.print("</html>");
  //       client.stop();
  //       // client.flush();
  //     }
      

  // }
 



  // read/ignore the rest of the request
  // do not client.flush(): it is for output only, see below
  while (client.available()) {
    // byte by byte is not very efficient
    // Serial.println(client.read());
    Serial.println(client.readStringUntil('\r'));
  }

  // client.print(F("dddd"));
  // Send the response to the client
  // it is OK for multiple small client.print/write,
  // because nagle algorithm will group them into one single packet
  // client.print(F("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n<!DOCTYPE HTML>\r\n<html>\r\nGPIO is now "));
  // client.print((val) ? F("high") : F("low"));
  // client.print(F("<br><br>Click <a href='http://"));
  // client.print(WiFi.localIP());
  // client.print(F("/gpio/1'>here</a> to switch LED GPIO on, or <a href='http://"));
  // client.print(WiFi.localIP());
  // client.print(F("/gpio/0'>here</a> to switch LED GPIO off. Or use this: <a href='http://"));
  // client.print(WiFi.localIP());
  // client.print("/2/0'>code</a> .");
  // client.print(F("<a href='http://"));
  // client.print(WiFi.localIP());
  // client.print(F("/6/0'>Stop</a>."));
  // client.print("</html>");
  // client.print(myString);

  // The client will actually be *flushed* then disconnected
  // when the function returns and 'client' object is destroyed (out-of-scope)
  // flush = ensure written data are received by the other side
  // Serial.println(F("Disconnecting from client"));
}

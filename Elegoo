
int oldSpeed = 0;
int goSpeed= 150;
String receivedData = "";

// Motor A connections
int enA = 2;
int in1 = 3;
int in2 = 4;
// Motor B connections
int enB = 5;
int in3 = 6;
int in4 = 7;
int relaisPin = 8;
int relaisStatus = 0;

const int analogInPin = A0;

// Bluetooth module
 int data = 0;

// Wheel Encoder
int wheelPin1 = 9;
int wheelPin2 = 10;
int wheelPings1 = 0;
int wheelPings2 = 0;
int wheelPingsWhenStopped1 = 0;
int wheelPingsWhenStopped2 = 0;
int wheelData1 = 2;
int wheelData2 = 2;
int oldWheelData1 = 2;
int oldWheelData2 = 2;
int distance1 = 0; // distance traveled by Robomow (for now: since activation)
int distance2 = 0;
const int R = 9; //Radius of wheel
const int N = 119; //Gemiddelde pings per rotatie
const float pi = 3.14;



void setup() {
  delay(1000);
  Serial.begin(9600);
  Serial.setTimeout(1000);
  Serial.println();
  Serial.print("Configuring access point...");

   // Set all the motor control pins to outputs
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(relaisPin, OUTPUT);
  
  // Turn off motors - Initial state
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  digitalWrite(relaisPin, LOW);

  // Get pings from wheel encoder
  digitalWrite(wheelPin1, INPUT);
  digitalWrite(wheelPin2, INPUT);
  
  // attachInterrupt(digitalPinToInterrupt(wheelPin), readEncoder, FALLING);

}

void readEncoder(){
  wheelData1 = digitalRead(wheelPin1);
  wheelData2 = digitalRead(wheelPin2);

  if(wheelData1 != oldWheelData1){
    oldWheelData1 = wheelData1;
    ++wheelPings1;
    ++wheelPingsWhenStopped1;
    // Serial.println("Wheeldata: " + String(wheelData));
    // Serial.println("Them wheels: " + String(getCounter1()));
  }
  if(wheelData2 != oldWheelData2){
    oldWheelData2 = wheelData2;
    ++wheelPings2;
    ++wheelPingsWhenStopped2;
    // Serial.println("Wheeldata: " + String(wheelData));
    // Serial.println("Them wheels: " + String(getCounter2()));
  }
}

int getCounter1(){
  int result;
  noInterrupts();
  result = wheelPings1;
  interrupts();
  return result;
}
int getCounter2(){
  int result;
  noInterrupts();
  result = wheelPings2;
  interrupts();
  return result;
}

int getDistance1(){
  distance1 = ((2*pi*R)/N) * getCounter1();
  // Serial.println("Distance in cm: " + String(distance));
  return distance1;
}
int getDistance2(){
  distance2 = ((2*pi*R)/N) * getCounter2();
  // Serial.println("Distance in cm: " + String(distance));
  return distance2;
}

void loop() {

  readEncoder();
  if(getDistance1() >= 100){
    getDistance2();
    Stop();
    Serial.println("Distance1 in cm: " + String(distance1));
    Serial.println("Distance2 in cm: " + String(distance2));
  }
  // goForward(goSpeed);

  if(Serial.available() > 0) { // Checks whether data is comming form the serial port
    data = Serial.read(); //Reads the data from the serial port
    
    
      if(data == '1'){
        rotateLeft(goSpeed);
      }
      else if(data == '2'){
        goForward(goSpeed);
      }
      else if(data == '3'){
        rotateRight(goSpeed);
      }
      else if(data == '4'){
        goBackward(goSpeed);
      }
      else if(data == '5'){
        goForward(goSpeed);
      }
      else if(data == '6'){
        Stop();
      }
  }

}

/////////////////////////////////////////////////////////////////////////

int speedVerify(int speed) {
  if (speed < 0){
    speed = 0;
  }
  if (speed > 255){
    speed = 255;
  }
  return speed;
}


void goForward(int motorSpeed){
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  motorSpeed = speedVerify(motorSpeed);
  analogWrite(enA, motorSpeed);
  analogWrite(enB, 245);   
  // Serial.print("forward:");
  Serial.println(motorSpeed);
  
}

void goBackward(int motorSpeed){
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);

  motorSpeed = speedVerify(motorSpeed);
  analogWrite(enA, motorSpeed);
  analogWrite(enB, 245);
  // Serial.print("backward:");
  // Serial.println(motorSpeed);
}
void goRight(int motorSpeed){
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  motorSpeed = speedVerify(motorSpeed);
  analogWrite(enA, motorSpeed);
  analogWrite(enB, motorSpeed/2);
  // Serial.print("right:");
  // Serial.println(motorSpeed);
  
}

void rotateRight(int motorSpeed){
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  motorSpeed = speedVerify(motorSpeed);
  analogWrite(enA, motorSpeed);
  analogWrite(enB, motorSpeed);
  // bv
  
}


void goLeft(int motorSpeed){
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);  
  analogWrite(enA, motorSpeed/2);
  analogWrite(enB, motorSpeed);
  Serial.print("left:");
  Serial.println(motorSpeed);
  
}
void rotateLeft(int motorSpeed){
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);  
  analogWrite(enA, motorSpeed);
  analogWrite(enB, motorSpeed);
  Serial.print("rotate left:");
  Serial.println(motorSpeed);
  
}

void Stop(){
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  analogWrite(enA, 0);
  analogWrite(enB, 0);
  // getDistance();
  oldWheelData1 = 2;
  wheelPings1 = 0;
  oldWheelData2 = 2;
  wheelPings2 = 0;
  Serial.println("stop");
}

void setMower(bool value) {
  if (value == true) {
    digitalWrite(relaisPin, HIGH);
    relaisStatus = 1;
  }
  if (value == false) {
    digitalWrite(relaisPin, LOW);
    relaisStatus = 0;
  }
}

float getBatteryStatus() {
  int sensorValue = analogRead(analogInPin);
  float batteryVoltage=map(sensorValue,0,932,0,1680);
  batteryVoltage = batteryVoltage/100;
  return batteryVoltage;
}

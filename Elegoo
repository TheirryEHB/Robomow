
#include <SoftwareSerial.h>

int oldSpeed = 0;
int goSpeed= 128; // Snelheid motor 1 ,links
int goSpeed2 = 255; // Snelheid motor 2 --> rechts krijgt vaak te wijnig kracht
const int motor_offset = 5;

/* Motor A connections*/
int enA = 2;
int in1 = 3;
int in2 = 4;
/* Motor B connections*/
int enB = 5;
int in3 = 6;
int in4 = 7;
int relaisPin = 8; //Pin naar relay voor grasmaaier bladen
int relaisStatus = 0; //Status relay
int running = 0;

/*Bluetooth module*/
String data = ""; //Data van bluetooth module
// const byte rxPin = 11;
// const byte txPin = 12;
// SoftwareSerial mySerial = SoftwareSerial(rxPin, txPin);

/* Wheel Encoder*/
int wheelPin1 = 9; //Pin voor data wiel 1 (linker wiel, oranje draad)
int wheelPin2 = 10; //(rechter wiel, grijze draad)
int wheelPingsWhenStopped1 = 0; // Aantal pings wanneer wiel 1 is gestopt
int wheelPingsWhenStopped2 = 0; 
int pingsWhenStraight = 0;
int wheelData1 = 2; // Data weelencoder wiel 1
int wheelData2 = 2; 
int oldWheelData1 = 2; // Oude wieldata wiel 1 om zo te weten wanneer er nieuwe data binnen is gekomen
int oldWheelData2 = 2;
int distance1 = 0; // distance traveled by Robomow (for now: since activation)
int distance2 = 0;
const int R = 9; //Radius of wheel
const int N = 57; //Gemiddelde pings per rotatie, was 3077
const float pi = 3.14;
const int lengthRobo = 55;


// PeriSensor
int periDataFront = 0; // Data voor perimeter sensor aan de voorkant
int periDataLeft = 0; // Data voor perimeter sensor aan de rechterkant
int periPinFront = A0; // Pin voor perimeter sensor aan de voorkant
int periPinRight = A1; // Pin voor perimeter sensor aan de rechterkant
int turning = 0;
int turningRight = 0;
int turningLeft = 0;
int degreeToTurn = 0;
int degreeToTurn90 = 40; //was 900 nu 16. Als enkel w1(linker) wordt gebruikt dan is het rond de 40
int degreeToTurn1 = degreeToTurn90 / 90; //--> 0.17777...8
int degreePer1Ping = 90 / degreeToTurn90; //--> 5.625
int stopedTurning = 0; 
int count = 0;
int normalLeftSensitivity = 150;
int leftPeriSensitivity = normalLeftSensitivity;
enum frontFreeStates{
  frontFree,
  frontNotFree,
  frontBackFree  
};
enum frontFreeStates frontFreeState;
enum frontFreeStates frontNow;
enum frontFreeStates frontBack;
int arraymax = 10;
int frontPeriArray[10];
int arrayIndex = 0;
int frontAvr = 0;
// int leftPeriArray[10];
// int leftAvr = 0;

//Battery
const int analogInPin = A2; // Pin lezen batterij

//Oppervlakte berekenen
//int seenEnd = 0;
int circumflex = 0; //De berekende opp
int pingsWhenStraight1 = 0; //Aantal pings voor eerste keer draaien
int pingsWhenStraight2 = 0; //Aantal pings voor tweede keer draaien
int calculatingField = 0; // Is Robomow opp aan het berekenen?
int doneCalculatingField = 0; // Is Robomow klaar met opp berekenen?
int dis1 = 0; //Afstand afgelegd voor eerste keer draaien
int dis2 = 0; //Afstand afgelegd voor tweede keer draaien
int first = 0; // Hoeveelste afstand in een rechte lijn is Robomow aan het berekenen

// RasberryPi
int searchingForDock = 0; // Is Robomow aan het zoeken voor de dock?
int foundDock = 0; // Heeft Robomow de dock gevonden?
int allignedToDock = 0; // Staat Robomow recht tegenover de dock?

//Cutting grass
int cutting = 0; // Is Robomow cutting the grass?
int doneCutting = 0; // Is Robomow done cutting the grass?
int maxUpDown = 0; // How many times Robomow should go up and down
int whentUpDown = 0; // How many times Robomow has gone up and down

//Moving in matrix
int moveMatrix = 0;
int wheelpingsBlock1 = 0; // When equal to 3410, one matrix section has been traveled
int wheelpingsBlock2 = 0;
int totalDegTurnedRight = 0;
int totalDegTurnedLeft = 0;

void setup() {
  
  Serial.begin(115200); //9600
  Serial.setTimeout(1000);
  
  // pinMode(rxPin, INPUT);
  // pinMode(txPin, OUTPUT);
  // mySerial.begin(9600);

   // Set all the motor control pins to outputs
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(relaisPin, OUTPUT);
  
  // Turn off motors - Initial state
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  digitalWrite(relaisPin, LOW);

  // Get pings from wheel encoder
  digitalWrite(wheelPin1, INPUT_PULLUP);
  digitalWrite(wheelPin2, INPUT_PULLUP);

  // attachInterrupt(digitalPinToInterrupt(wheelPin1), &readEncoder, CHANGE);
  // attachInterrupt(digitalPinToInterrupt(wheelPin2), readEncoder, CHANGE);

  delay(1000);

  frontFreeState = frontFree;
  frontNow = frontFreeState;
  frontBack = frontFree;
  calculatingField = 1;
  // goForward(goSpeed, goSpeed2);
  // driveStraight(100, 255);
  // degreeToTurn = degreeToTurn90;
  // rotateDegreeLeft(goSpeed, goSpeed2);
}

void loop() {
 
  float batteryVoltage = getBatteryStatus();
  readPerimeters();
  readEncoder();

  if(frontFreeState != frontNow){
    // Serial.println("Frontfree is: " + String(frontFreeState));
    frontNow = frontFreeState;
    frontBack = frontBackFree;
    if(frontFreeState == frontBackFree){
      frontFreeState = frontFree;
      leftPeriSensitivity = normalLeftSensitivity;

      Serial.println("degP: " + String(totalDegTurnedRight));
      
      int totaldegRight = pingsToDegree(totalDegTurnedRight);
      calculatingField = 0;
      
      if(totaldegRight != 0 && pingsWhenStraight > N/2){
        Serial.println("Degrees Turned: " + String(totaldegRight/3.333));
        Serial.println("Distance Traveld: " + String(pingsWhenStraight));
        totalDegTurnedRight = 0;
      }
      totalDegTurnedRight = 0;
     
    }
    else if(frontBack == frontBackFree && frontFreeState == frontFree){
      Serial.println("Done turning.");
      frontBack = frontFree;
    }
  }
    // if(wheelpingsBlock1 >= (N/4) - 4 || wheelpingsBlock1 <= (N/4) + 4){
    //   // send data to python
    //   // Serial.write("Wheel")
    //   wheelpingsBlock1 = 0;
    //   wheelpingsBlock2 = 0;
    // }

    if(searchingForDock == 1 && foundDock == 1){ //Dock gevonden
      Serial.println("Stop");
      Stop();
    }
    
   
    if(turning == 1){ 
      stopRotateDegree();
      
      if(calculatingField == 1 && turning == 0){
          leftPeriSensitivity = normalLeftSensitivity;
        goForward(goSpeed, goSpeed2);
      }
    }
    
  
  if(searchingForDock == 1 && foundDock == 0){ //Dock zoeken
    // Serial.println("rotating");
      // rotateLeft(150, 150);
  }
  
  if(Serial.available() > 0) { // Checks whether data is comming form the serial port
    // data = Serial.read();
   data = Serial.readStringUntil('\n');
   Serial.println("Notreceived: " + String(data));
    //   Serial.println(String(data).indexOf("left"));
    if(data.indexOf("l") == 5){
      if(data.length() == 14){ //3 char angle
        moveMatrix = 1;
        Serial.println(data.substring(11,14));
        int angl = data.substring(11,14).toInt();
        degreeToPings(angl);
        rotateDegreeLeft(goSpeed, goSpeed2);
      }
      else if(data.length() == 13){ // 2 char angle
        moveMatrix = 1;
        Serial.println(data.substring(11,13));
        int angl = data.substring(11,13).toInt();
        degreeToPings(angl);
        rotateDegreeLeft(goSpeed, goSpeed2);
      }
      else if(data.length() == 12){ // 1 char angle
        moveMatrix = 1;
        Serial.println(data.substring(11,12));
        int angl = data.substring(11,12).toInt();
        degreeToPings(angl);
        rotateDegreeLeft(goSpeed, goSpeed2);
      }
  
    }

    if(data == "1"){
      rotateLeft(goSpeed, goSpeed2);
    }
    else if(data == "2"){
      goForward(goSpeed, goSpeed2);
    }
    else if(data == "3"){
      rotateRight(goSpeed, goSpeed2);
    }
    else if(data == "4"){
      goBackward(goSpeed, goSpeed2);
    }
    else if(data == "5"){
      goForward(goSpeed, goSpeed2);
    }
    else if(data == "6"){
      Stop();
    }
    else if(data == "7"){ //Draai 90 graden recths
      //Draai 90 graden
      degreeToTurn = degreeToTurn90;
      rotateDegreeRight(goSpeed, goSpeed2);
    }
    else if(data == "8"){ //Draai 90 graden links
      //Draai 90 graden
      degreeToTurn = degreeToTurn90;
      rotateDegreeLeft(goSpeed, goSpeed2);
    }
    else if(data == "9"){
      driveStraight(100, goSpeed);
    }
    else if(data == "t"){ // Begin berekeken opp
      startCalcCirc();
    }
    else if(data == "r"){ // Dock gevonden, maar ligt rechts
      if(calculatingField == 0){
      //Serial.println("FoundDock");
        foundDock = 1;
        // stopRotateDegree();
        degreeToTurn = 100;
        rotateDegreeRight(128, 128);
      }
    }
    else if(data == "l"){ // Dock gevonden, maar ligt links
      Serial.println("received: " + String(data)); 
      if(calculatingField == 0){
      //Serial.println("FoundDock");
        foundDock = 1;
        // stopRotateDegree();
        degreeToTurn = 100;
        rotateDegreeLeft(128, 128);
      }
    }
    else if(data == "s"){ // Begin zoeken dock
      searchingForDock = 1;
      foundDock = 0;
      rotateLeft(goSpeed, goSpeed2);
    }
    else if(data == "c"){
      startCuttingGrass();
    }
  }

}

void startCalcCirc(){
  first = 0;
  calculatingField = 1;
  degreeToTurn = degreeToTurn90;
  Serial.println("startin");
  goForward(goSpeed, goSpeed2);
}

void startCuttingGrass(){
  Serial.println("cuttin: " + String(cutting));
  if(cutting == 0){
    cutting = 1;
    startCalcCirc();
    Serial.println("cuttin: " + String(cutting));
  }
  
  else if(cutting == 1){
    Serial.println("wentup: " + String(whentUpDown));
    if(whentUpDown < maxUpDown){
      degreeToTurn = degreeToTurn90 * 2;
      whentUpDown++;
      goForward(goSpeed, goSpeed2);
    }
    else if(whentUpDown == maxUpDown){
      cutting = 0;
      doneCutting = 1;
    }
    
  }
  
}

/**
  Rechtdoor rijden op een dynamische manier.
  Werkt nog niet.
**/
void driveStraight(int dist, int power){

  running = 1;
  setValuesToZero();

  unsigned long num_ticks_l;
  unsigned long num_ticks_r;

  // Set initial motor power
  int power_l = power;
  int power_r = power;

  // Remember previous encoder counts
  unsigned int enc_l_prev = getCounter1();
  unsigned int enc_r_prev = getCounter2();

  // Used to determine which way to turn to adjust
  unsigned long diff_l;
  unsigned long diff_r;
  unsigned long target_count = getPingsDistance(dist);
  // Serial.println(String(target_count));
  Serial.print("Driving for ");
  Serial.print(dist);
  Serial.print(" cm (");
  Serial.print(target_count);
  Serial.print(" ticks) at ");
  Serial.print(power);
  Serial.println(" motor power");
  //Wiel 2 is rechts

  while((wheelPingsWhenStopped2 < target_count)){
    
    readEncoder();
    num_ticks_l = getCounter1();
    num_ticks_r = getCounter2();

    Serial.print("d1: " + String(diff_l));
    Serial.print(" p1: " + String(power_l));
    Serial.println(" w1: " + String(num_ticks_l));
    Serial.print("d2: " + String(diff_r));
    Serial.print(" p2: " + String(power_r));
    Serial.println(" w2: " + String(num_ticks_r));
    // Drive
    goForward(power_l, power_r);

    // Number of ticks counted since last time
    diff_l = num_ticks_l - enc_l_prev;
    diff_r = num_ticks_r - enc_r_prev;

    // Store current tick counter for next time
    enc_l_prev = num_ticks_l;
    enc_r_prev = num_ticks_r;

    // If left is faster, slow it down and speed up right
    if ( diff_l > diff_r ) {
      power_l -= motor_offset;
      power_r += motor_offset;
    }

    // If right is faster, slow it down and speed up left
    if ( diff_l < diff_r ) {
      power_l += motor_offset;
      power_r -= motor_offset;
    }

    power_l = speedVerify(power_l);
    power_r = speedVerify(power_r);

    // Brief pause to let motors respond
    delay(20);
  }

  // Brake
  Stop();  
}

/* 
  Get data from perimeter pins and put them in periDataFront and periDataRight
  https://www.arduino.cc/reference/en/language/functions/analog-io/analogread/
  https://forum.arduino.cc/t/analogread-always-returning-1023/239329/10
  De rightpin geeft 0 als niets in de buurt en 6 vannaf rond de 7 cm
  Vreemd genoeg geeft de frontpin minimaal 12 als data. En rond de 5cm verhoogt dit naar een 20
*/
void readPerimeters(){
  noInterrupts();
  periDataFront = analogRead(periPinFront);
  //  Serial.println("SensorDataFront: " + String(periDataFront));
  periDataLeft = analogRead(periPinRight); //groen gijs
  // Serial.println("SensorDataLeft: " + String(periDataLeft));
  interrupts();

  frontPeriArray[arrayIndex%arraymax] = periDataFront;
  // leftPeriArray[arrayIndex%arraymax] = periDataLeft;
  arrayIndex++;
  int sumFront = 0;
  int sumLeft = 0;
  int arrayLength = sizeof(frontPeriArray) / sizeof(frontPeriArray[0]);
  for (int i = 0; i < arrayLength; i++) {
    sumFront += frontPeriArray[i]; // add the value of each element to the running total
    // sumLeft += leftPeriArray[i];
  }
  frontAvr = sumFront/arrayLength;
  // leftAvr = sumLeft/arrayLength;


  // Serial.println("avr is: " + String(frontAvr));

  if(running == 1){
    if(frontAvr > 90){ // Van voor vast --> naar rechts
      Stop();
      frontFreeState = frontNotFree;
      degreeToTurn = degreeToTurn90/10;
      
      leftPeriSensitivity = 0;
      rotateDegreeRight(goSpeed, goSpeed2);
    }
    else if(frontAvr < 20){ // van voor NIET vast
      if(frontFreeState == frontFree && turningRight != 1){ //van voor en links vrij
            degreeToTurn = degreeToTurn90;
            rotateDegreeLeft(goSpeed, goSpeed2);
          }
      if(periDataLeft >= leftPeriSensitivity ){ // van voor NIET vast, maar links wel --> vooruit
        if(frontFreeState == frontNotFree && periDataLeft >= 350){ //normaal: frontFreeState == frontNotFree && leftAvr >= 350
          frontFreeState = frontBackFree;
        }
        goForward(goSpeed, goSpeed2);
      }
      else if(periDataLeft < leftPeriSensitivity && turningRight != 1){ // links NIET MEER vast --> naar links
        if(frontFreeState == frontNotFree){
          degreeToTurn = 5;
          // Serial.println("turnleft1");
          rotateDegreeLeft(goSpeed, goSpeed2);
        }
      }
    }
  }
}

///////////////////////////////////////////// Wheel Encoder part
/* 
  Get data from wheelencoder pins and put them in wheelData1 and wheelData2.
  Also increase wheelpings1 and 2 and wheelPingsWhenStopped1 and 2 if needed.

*/
void readEncoder(){ 

  wheelData1 = digitalRead(wheelPin1);
  wheelData2 = digitalRead(wheelPin2);
  // Serial.println("wheeld2v: " + String(wheelData1) + " H2");
   
  if(wheelData1 == LOW && oldWheelData1 == HIGH){
    wheelpingsBlock1 = oldWheelData1;

    ++wheelPingsWhenStopped1;
    ++pingsWhenStraight;
    correctTotalDegTurned();
    
    // Serial.println("wheeld: " + String(wheelPingsWhenStopped1) + " H1");
  }
  if(wheelData2 == LOW && oldWheelData2 == HIGH){
    wheelpingsBlock2 = oldWheelData2;
  
    ++wheelPingsWhenStopped2;
    ++pingsWhenStraight;
    correctTotalDegTurned();
    // Serial.println("wheeld2: " + String(wheelPingsWhenStopped2) + " H2");
  }

  oldWheelData1 = wheelData1;
  oldWheelData2 = wheelData2;
}

void correctTotalDegTurned(){
      if(turningRight == 1){
        ++totalDegTurnedRight;
      }
      if(turningLeft == 1){
        totalDegTurnedRight = totalDegTurnedRight - 1;
      }
      // Serial.println("totaldeg2: " + String(totalDegTurnedRight));
}

/*
  Return the number of pings foor wheel 1
*/
int getCounter1(){
  int result;
  noInterrupts();
  result = wheelPingsWhenStopped1;
  interrupts();
  return result;
}
/*
  Return the number of pings foor wheel 2
*/
int getCounter2(){
  int result;
  noInterrupts();
  result = wheelPingsWhenStopped2;
  interrupts();
  return result;
}

/*
  Return distance traveled by wheel 1 in cm
  */
int getDistance1(){
  distance1 = (((2*pi*R)/N) * getCounter1()) + lengthRobo;
  return distance1;
}
/*
  Return distance traveled by wheel 2 in cm
  */
int getDistance2(){
  distance2 = (((2*pi*R)/N) * getCounter2()) + lengthRobo;
  return distance2;
}
/*
  Returns the distance depending on the number of pings @{code: ps} in cm
*/
int getDistanceFromPings(int ps){
  distance1 = (((2*pi*R)/N) * ps) + lengthRobo;
  return distance1;
}
/*
  Returns the number of pings needed to travel distance @{code: dis} in cm
*/
long getPingsDistance(int dis){
  return dis/((2*pi*R)/N);
}

///////////////////////////////////////////////////////////////////////// Movement part

/* 
  Keep speed of wheel 1 in allowed range
  */
int speedVerify(int speed) {
  if (speed < 0){
    speed = 0;
  }
  if (speed > 255){
    speed = 255;
  }
  return speed;
}

void goForward(int motorSpeed1, int motorSpeed2){
  running = 1;
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  motorSpeed1 = speedVerify(motorSpeed1);
  motorSpeed2 = speedVerify(motorSpeed2);
  analogWrite(enA, motorSpeed1);
  analogWrite(enB, motorSpeed2);
}

void goBackward(int motorSpeed1, int motorSpeed2){
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  motorSpeed1 = speedVerify(motorSpeed1);
  motorSpeed2 = speedVerify(motorSpeed2);
  analogWrite(enA, motorSpeed1);
  analogWrite(enB, motorSpeed2);
  // Serial.print("backward:");
  // Serial.println(motorSpeed);
}
void goRight(int motorSpeed1, int motorSpeed2){
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  motorSpeed1 = speedVerify(motorSpeed1);
  motorSpeed2 = speedVerify(motorSpeed2);
  analogWrite(enA, motorSpeed1);
  analogWrite(enB, motorSpeed2/2);
  // Serial.print("right:");
  // Serial.println(motorSpeed);
  
}

void rotateRight(int motorSpeed1, int motorSpeed2){
  running = 1;
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  motorSpeed1 = speedVerify(motorSpeed1);
  motorSpeed2 = speedVerify(motorSpeed2);
  analogWrite(enA, motorSpeed1);
  analogWrite(enB, motorSpeed2);
  
}

void goLeft(int motorSpeed1, int motorSpeed2){
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);  
  analogWrite(enA, motorSpeed1/2);
  analogWrite(enB, motorSpeed2);
  // Serial.print("left:");
  // Serial.println(motorSpeed1);
  
}
void rotateLeft(int motorSpeed1, int motorSpeed2){
  setValuesToZero();
  turning = 1;
  running = 1;
  stopedTurning = 0;
  turningRight = 0;
  turningLeft = 1;

  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);  
  motorSpeed1 = speedVerify(motorSpeed1);
  motorSpeed2 = speedVerify(motorSpeed2);
  analogWrite(enA, motorSpeed1);
  analogWrite(enB, motorSpeed2);
  
}

void degreeToPings(int deg){
  degreeToTurn = degreeToTurn1 * deg; // or degreePer1Ping * deg
}
int pingsToDegree(int pings){
  return pings*degreePer1Ping;
}

/**
  Stop met draaien als het aantal pings van wiel2 {@code wheelPingsWhenStopped2} 
  een bepaalde hoeveelheid {@code degreeToTurn} heeft bereikt.
  Op deze manier is het mogelijk om de hoek dat Robomow moet draaien te bepalen.

  stopRatateDegree is algemene van rotateDegreeLeft en rorotateDegreeRight.
  En heeft extra functies voor berekenen van oppervlakte.
**/
void stopRotateDegree(){
  if(wheelPingsWhenStopped2 >= degreeToTurn){ 
  
    if(moveMatrix == 1){
      moveMatrix = 0;
      Serial.write("Done matrix Turn");
    }
    // Serial.println("first is: " + String(wheelPingsWhenStopped2));
    stopedTurning = 1;
    // Stop();
    if(calculatingField == 1 && turning == 1){
      Stop();
    }
  }
}

/**
  Links draaien in een bepaalde hoek.
**/
void rotateDegreeLeft(int motorSpeed1, int motorSpeed2){
  setValuesToZero();
  turning = 1;
  running = 1;
  stopedTurning = 0;
  turningRight = 0;
  turningLeft = 1;

  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  motorSpeed1 = speedVerify(motorSpeed1);
  motorSpeed2 = speedVerify(motorSpeed2/2);
  // analogWrite(enA, motorSpeed1);
  analogWrite(enB, motorSpeed2);
}

/**
  Rechts draaien in een bepaalde hoek.
**/
void rotateDegreeRight(int motorSpeed1, int motorSpeed2){
  setValuesToZero();
  turning = 1;
  turningRight = 1;
  turningLeft = 0;
  running = 1;
  stopedTurning = 0;

  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  motorSpeed1 = speedVerify(200);
  motorSpeed2 = speedVerify(motorSpeed2);
  analogWrite(enA, motorSpeed1);
  analogWrite(enB, motorSpeed2);
}
  

void Stop(){
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  analogWrite(enA, 0);
  analogWrite(enB, 0);

  // Serial.println("wheelpingsStopped1: " + String(wheelPingsWhenStopped1));
  // Serial.println("wheelpingsStopped2: " + String(wheelPingsWhenStopped2));
  setValuesToZero();
  
}

/**
  Alle telwaardes op 0 zetten.
**/
void setValuesToZero(){
  oldWheelData1 = 2;
  
  oldWheelData2 = 2;
  
  wheelPingsWhenStopped1 = 0;
  wheelPingsWhenStopped2 = 0;
  running = 0;
  turning = 0;
  turningRight = 0;
  turningLeft = 0;
  
  // stopedTurning = 0;
}

/*
  Set mower to spinning or not spinning
  */
void setMower(bool value) {
  if (value == true) {
    digitalWrite(relaisPin, HIGH);
    relaisStatus = 1;
  }
  if (value == false) {
    digitalWrite(relaisPin, LOW);
    relaisStatus = 0;
  }
}

/*
  Get battery status in volts
  */
float getBatteryStatus() {
  int sensorValue = analogRead(analogInPin);
  float batteryVoltage=map(sensorValue,0,932,0,1680);
  batteryVoltage = batteryVoltage/100;
  return batteryVoltage;
}
